학원카페 : https://cafe.naver.com/fordeveloper

1. JDK (Java Development Kit) 다운로드 및 설치
=> https://oracle.com (JDK 17.0.5 LTS)

2. Path 설정 => 톰캣구동시 java_home으로 인식하기 때문에 이름은 java_home 그 후
path에 %JAVA_HOME%\bin 추가

3. 이클립스 => https://eclipse.org

4. Java의 특징
ㄴ 한 번 프로그램을 작성하면 어디에서든지 실행가능 하다. (WORA : Wirte Once, Run Anywhere)
ㄴ 자바가상머신(Java Virtual Machine)이 컴파일된 바이트코드를 실행시킬 수 있는 소프트웨어
ㄴ 운영체제에 상관 없이 실행

5. 자료형
1 ) 기본 자료형 (Primitive DataType)
ㄴ 논리형 (boolean) - 1 byte ( 연산의 단위가 1바이트)
ㄴ 문자형 (char) - 2 byte (uni-code)
ㄴ 정수형 : byte(1byte), short(2byte), int(4byte), long(8byte)
ㄴ 실수형 : float(4byte), double(8byte)

2 ) 참조 자료형 (Reference DataType)
ㄴ 배열
ㄴ 클래스
ㄴ 인터페이스

6. 연산자 (Operator)
ㄴ 산술 연산자
ㄴ 관계 연산자
ㄴ 논리 연산자
ㄴ 증감 연산자
ㄴ 복합 대입 연산자
ㄴ 삼항 연산자
ㄴ 형변환

7. 제어문
ㄴ 조건문 : if-else, switch-case
ㄴ 반복문 : for, while, do~while
ㄴ 기타 : continue, break, return

8. 배열
ㄴ 1차원
ㄴ 2차원

9. 메소드
ㄴ 메소드 오버로딩 : 메소드 이름이 같고, 매개변수 값 이 다른 메소드를 한 클래스 내에 여러개 정의

10. 클래스, 객체(인스턴스)

11. 정보은폐, 캡슐화
ㄴ외부에서 데이터에 직접 접근하지 못하도록 멤버필드를 private으로 설정 후 getter setter 사용

12. 상속
ㄴ 메소드 오버라이딩 : 상위 클래스로부터 물려받은 메소드를 재정의

13. 생성자
ㄴ 클래스 이름과 같고 반환형이 없다.
ㄴ 생성자를 정의하지 않으면 컴파일러가 자동으로 생성
ㄴ 생성자 오버로딩 성립
ㄴ 생성자를 정의해버리면 컴파일러가 자동으로 생성하지 않음
ㄴ 자기 자신의 오버로딩된 생성자 호출시 this 키워드 사용

14. static
ㄴ 메모리 공유

15. 접근 제한자

16. final keyword
ㄴ 클래스에 final이 붙으면 상속되지 않음
ㄴ 메소드에 final이 붙으면 오버라이딩 되지 않음
ㄴ 변수에 fintal이 붙으면 재 할당 불가

17. 다형성 (Polymorphism)
ㄴ 하위 클래스 타입의 객체를 상위 클래스 타입의 변수로 참조 가능

18. 추상 (abstract) 클래스
ㄴ 한 클래스 안에 추상 메소드가 하나 이상 존재하면 그 클래스도 추상 클래스로 지정된다.
ㄴ 추상 클래스를 상속받는 하위 클래스는 반드시 추상메소드를 오버라이딩 해야한다.

19. 인터페이스
ㄴ 모든 변수는 상수
ㄴ 모든 메소드는 추상 메소드
ㄴ 인터페이스를 구현할 때는 implements 키워드 사용
ㄴ 인터페이스를 구현하는 하위클래스는 인터페이스 내부에 존재하는 모든추상메서드를 오버라이딩 해야한다.
ㄴ 동시에 여러 개 구현 가능
ㄴ 인터페이스끼리 상속, 다중상속 가능
ㄴ 자바9 버전부터 default 메소드 추가

20. 익명 클래스
ㄴ 따로 자바 파일을 작성하지 않고, 바로 익명 객체 생성

21. 싱글턴 패턴 구현순서
ㄴ 생성자를 작성하고 private로 설정
ㄴ 자기자신을 참조할 수 있는 변수 선언 후 private static 지정
ㄴ 자기자신의 인스턴스를 반환하는 getter 작성
ㄴ Singleton.getInstance();

22. 예외 처리
ㄴ 일반 예외 (checked exception) : 컴파일러가 예외발생 가능성을 미리 검증
ㄴ 실행 예외 (unchecked exception) : 실행 시, 예외발생 확인 가능
(NullPointerException, ArrayIndexOutOfBoundsException, NumberFormatException, ClassCastException)
ㄴ try~catch 이용
ㄴ finally 블럭 : 예외 발생 유무와 상관없이 실행되는 블럭
ㄴ 예외객체 직접 생성 : thorw 이용
ㄴ throws 키워드를 사용해서 예외를 날리는 방법

23. 스레드(Thread)
ㄴ 프로세스 내에서 실행단위가 되는 하나의 작업 흐름 (단일스레드 vs 멀티스레드)
ㄴ 단일 스레드 : 프로세스 내에서 수행흐름이 하나
ㄴ 멀티스레드 : 프로세스 내에서 수행흐름이 여러개
ㄴ 멀티스레드 구현 : Thread 클래스를 상속, Runnable 인터페이스를 구현하는 방법
 1) extends Thread
 2) run method 재정의
 3) Thread를 상속받은 클래스의 객체 생성
 4) start() 메소드 호출

 1) implements Runnable
 2) run method 재정의
 3) Thread 객체 생성 후, Runnable 인터페이스를 구현한 객체를 인자로 전달
 4) start() 메소드 호출

24. 그 외 클래스
ㄴ Object
ㄴ String, StringBuilder
ㄴ Wrapper
ㄴ Calendar

25. Collection : Set, List, Map
ㄴ set
 1) 중복된 데이터 불가
 2) 저장 순서를 기억하지 않음

ㄴ list
 1) 중복된 데이터 허용
 2) 저장 순서 유지

ㄴ map
 1) 데이터를 키와 값 쌍으로 저장

26. 프로퍼티 에디터
ㄴ name : Properties Editor
ㄴ Location : http://propedit.sourceforge.jp/eclipse/updates

27. 파일 입출력 (I/O)
ㄴ 스트림 : 데이터 이동 통로
ㄴ 스트림 분류
 1) 바이트 기반 스트림 - InputStream, OutputStream (이미지, 동영상, 문자)
 2) 문자 기반 스트림 - Reader, Writer (오로지 문자)

웹 환경설정

1. 톰캣 다운로드 및 연결 => https://apache.org
ㄴ 서블릿 컨테이터, 웹 컨테이너

2. 인코딩 변환 : URIEncoding="UTF-8"

3. 실행 브라우저 : 크롬

4. get, post 방식 한글 테스트

5. db 계정 생성 및 연결
ㄴ Connection 열결 테스트

6. 서블릿(Servlet)

SQL> conn sys/oraclejava@localhost:1521/xepdb1 as sysdba
연결되었습니다.
SQL> create user oraclejava
  2  identified by oraclejava
  3  default tablespace users
  4  quota unlimited on users
  5  temporary tablespace temp;

사용자가 생성되었습니다.

SQL> grant connect, resource to oraclejava;

권한이 부여되었습니다.

SQL>
SQL> conn oraclejava/oraclejava@localhost:1521/xepdb1
연결되었습니다.
SQL>

7. JDBC (Java DataBase Connectivity)
ㄴ 자바를 이용해서 데이터베이스 프로그래밍을 쉽게 할 수 있도록 제공된 API

8. 서블릿
ㄴ 클라이언트의 요청을 받아 처리 및 응답해주는 자바 객체
ㄴ HttpServlet을 상속받는다.

9. JSP (Java Server Page)
ㄴ JDBC를 이용하는 일반적인 작업 순서
 1) 오라클 드라이버 존재 유무 확인
 2) DB 연결을 위한 Connection을 얻어오기
 3) 얻어온 커넥션을 기반으로 Statement(PerparedStatement) 얻어오기
 4) 얻어온 ps를 기반으로 쿼리 실행
 5) SELECT의 경우 sql 실행 결과를 ResultSet으로 받아서 정보를 객체에 옮겨 준다.
 6) 작업중에 사용한 자원은 역순으로 반납한다.
 7) JDPC API가 만들어내는 예외를 직접 처리하거나 thorws를 이용해서 처리

10. 커넥션 풀
ㄴ DB와 연결된 커넥션을 미리 만들어서 풀속에 저장해두고 필요 시, 커넥션을 풀에서 가져다 쓰고 반환하는 기법
<Resource name="OracleCP" 
auth="Container"
driverClassName="oracle.jdbc.OracleDriver"
url="jdbc:oracle:thin:@localhost:1521/xepdb1"
username="oraclejava"
password="oraclejava"
type="javax.sql.DataSource"
maxActive="50"
maxWait="-1"
/>

MVC 패턴
ㄴ JSTL : 자바를 쓰지 않고 반복문을 돌릴 수 있음 : https://jakarta.apache.org

AJAX
ㄴ xhr.readyState
 0) uninitialized
 1) open
 2) send
 3) interactive : 데이터 일부를 receive
 4) complete : 응답 완료

ㄴ xhr.status

<filter>
	  <filter-name>set character encoding</filter-name>
	  <filter-class>org.apache.catalina.filters.SetCharacterEncodingFilter</filter-class>
	  <init-param>
	  	<param-name>encoding</param-name>
	  	<param-value>UTF-8</param-value>
	  </init-param>
  </filter>
  
  <filter-mapping>
  	<filter-name>set character encoding</filter-name>
  	<url-pattern>/*</url-pattern>
  </filter-mapping>

<servlet>
  	<servlet-name>dispatcher</servlet-name>
  	<servlet-class>board.controller.DispatcherServlet</servlet-class>
  </servlet>
  
  <servlet-mapping>
  	<servlet-name>dispatcher</servlet-name>
  	<url-pattern>*.do</url-pattern>
  </servlet-mapping>

커먼스 코덱(commons codec) 라이브러리 다운로드
ㄴ 비밀번호 암호화
ㄴ https://commons.apache.org